# PINNED VERSIONS
version_pins:
- &BOSH_DEPLOYMENT_VERSION 3f4466a51a74dadbff6612e7d2b79d2802668469

groups:
- name: capi-release
  jobs:
  - cc-unit-tests
  - bridge-unit-tests
  - capi-release-template-tests
  - create-capi-release
  - bump-capi-release
  - buffy-bits-postgres-webdav
  - mulan-postgres-webdav-bridge
  - elsa-mysql-s3-bypass
  - kiki-back-compat-migrations
  - xena-mysql-drats
  - xena-mysql-rotate-ccdb-key
  - xena-postgres-drats
  - leia-azure-storage
  - ripley-nfs
  - bump-ci-passed
- name: ship-it
  jobs:
  - ship-it
  - bump-cc-v2-api
  - bump-cc-v3-api
  - push-github-release
  - merge-capi-release-master
  - publish-docs-v3
  - update-api-info-v2-docs
- name: dependencies-docs
  jobs:
  - rc-docs-v3
  - update-checkman
  - deliver-stories
  - update-and-push-docs-v2
- name: bosh
  jobs:
  - update-bosh-arya
  - update-bosh-mulan
  - update-bosh-elsa
  - update-bosh-kiki
  - update-bosh-xena-mysql
  - update-bosh-xena-postgres
  - update-bosh-buffy
  - update-bosh-ripley
  - update-bosh-leia-azure-storage

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
- name: bosh2-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource
- name: file-url
  type: docker-image
  source:
    repository: pivotalservices/concourse-curl-resource
    tag: latest

resources:

# schedules
- name: weekly-sunday
  type: time
  source:
    location: America/Los_Angeles
    start: 23:00
    stop: 23:30
    days: [Sunday]

- name: nightly
  type: time
  source:
    location: America/Los_Angeles
    start: 23:00
    stop: 23:30

- name: deliver-capi-stories
  type: tracker
  source:
    token: ((deliver_capi_tracker_token))
    project_id: '966314'
    tracker_url: https://www.pivotaltracker.com

- name: capi-final-releases
  type: s3
  source:
    bucket: capi-final-releases
    regexp: capi-(.*).tgz
    access_key_id: ((wasabi_ci_artifacts_s3_access_key))
    secret_access_key: ((wasabi_ci_artifacts_s3_secret_key))

- name: capi-checkman
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-checkman.git

- name: capi-ci
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci.git

- name: capi-ci-private
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: arya-bbl-state
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: capi-release-master
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-release.git

- name: capi-release-ci-passed
  type: git
  source:
    branch: ci-passed
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-release.git

- name: capi-release-develop
  type: git
  source:
    branch: develop
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-release.git

- name: api-docs
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/api-docs.git

- name: api-docs-production-deploy
  type: cf
  source:
    api: https://api.run.pivotal.io
    username: ((cf_api_docs_username))
    password: ((cf_api_docs_password))
    organization: cfcommunity
    space: api
    skip_cert_check: false

- name: capi-release-tarball
  type: s3
  source:
    bucket: capi-releases
    regexp: capi-(.*)-.*-.*.tgz
    access_key_id: ((wasabi_ci_artifacts_s3_access_key))
    secret_access_key: ((wasabi_ci_artifacts_s3_secret_key))

- name: version
  type: semver
  source:
    access_key_id: ((wasabi_ci_artifacts_s3_access_key))
    secret_access_key: ((wasabi_ci_artifacts_s3_secret_key))
    initial_version: 0.0.0
    bucket: capi-release-versions
    key: current-capi-release-version
    region_name: us-east-1

- name: cc-api-v3-version
  type: semver
  source:
    driver: git
    uri: git@github.com:cloudfoundry/cloud_controller_ng.git
    branch: master
    file: config/version
    git_user: 'CAPI CI <cf-capi-eng+ci@pivotal.io>'
    private_key: ((private_key))

- name: cc-api-v2-version
  type: semver
  source:
    driver: git
    uri: git@github.com:cloudfoundry/cloud_controller_ng.git
    branch: master
    file: config/version_v2
    git_user: 'CAPI CI <cf-capi-eng+ci@pivotal.io>'
    private_key: ((private_key))

- name: staticfile-app
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry/cf-acceptance-tests.git
    private_key: ((private_key))
    paths:
    - assets/staticfile/**

- name: cc-uploader
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/cc-uploader.git

- name: github-release
  type: github-release
  source:
    user: cloudfoundry
    repository: capi-release
    drafts: true
    access_token: ((github_access_token))

- name: github-published-release
  type: github-release
  source:
    user: cloudfoundry
    repository: capi-release
    drafts: false
    access_token: ((github_access_token))

- name: cloud_controller_ng
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/cloud_controller_ng.git

- name: diego-release
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/diego-release.git

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack_failure_hook_url))

- name: sync-integration-tests
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/sync-integration-tests.git

- name: tps
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/tps.git

- name: cf-deployment
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-deployment.git
    private_key: ((private_key))
    branch: release-candidate

- name: cf-deployment-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-deployment.git
    private_key: ((private_key))
    branch: master

- name: cf-deployment-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: cf-deployment
    access_token: ((github_access_token))

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/cf-deployment-concourse-tasks.git
    tag_filter: v6.*

- name: cf-deployment-concourse-tasks-v7
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/cf-deployment-concourse-tasks.git
    tag_filter: v7.*

- name: cats-concourse-task
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/cats-concourse-task.git

- name: cf-acceptance-tests
  type: git
  source:
    branch: release-candidate
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/cf-acceptance-tests.git

- name: bbr-github-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore
    access_token: ((github_access_token))

- name: runtime-ci
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/runtime-ci.git

- name: gcp-xenial-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-xenial-go_agent

# Pinned at job level with BOSH_DEPLOYMENT_VERSION
- name: bosh-deployment
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/bosh-deployment.git

# Mulan resources
- name: mulan-bbl-state
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: mulan-integration-configs
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: mulan-deployment
  type: bosh2-deployment
  source:
    vars_store:
      provider: gcs
      config:
        bucket: ((mulan_bosh_vars_bucket))
        file_name: &mulan_vars_store_path "bosh/vars-store.yml"
        json_key: ((mulan_gcp_json_key))

# Ripley resources
- name: ripley-bbl-state
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: ripley-integration-configs
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: ripley-deployment
  type: bosh2-deployment
  source:
    vars_store:
      provider: gcs
      config:
        bucket: ((ripley_bosh_vars_bucket))
        file_name: &ripley_vars_store_path "bosh/vars-store.yml"
        json_key: ((ripley_gcp_json_key))

# Buffy resources
- name: buffy-bbl-state
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: buffy-integration-configs
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: buffy-deployment
  type: bosh2-deployment
  source:
    vars_store:
      provider: gcs
      config:
        bucket: ((buffy_bosh_vars_bucket))
        file_name: &buffy_vars_store_path "bosh/vars-store.yml"
        json_key: ((buffy_gcp_json_key))

# Elsa resources
- name: elsa-bbl-state
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: elsa-integration-configs
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: elsa-deployment
  type: bosh2-deployment
  source:
    vars_store:
      provider: gcs
      config:
        bucket: ((elsa_bosh_vars_bucket))
        file_name: &elsa_vars_store_path "bosh/vars-store.yml"
        json_key: ((elsa_gcp_json_key))

- name: elsa-aws-storage-terraform
  type: terraform
  source:
    storage:
      bucket: ((elsa_bosh_vars_bucket))
      bucket_path: aws-storage
      access_key_id: ((gcp_storage_access_key))
      secret_access_key: ((gcp_storage_secret_key))
      endpoint: storage.googleapis.com

# Kiki resources
- name: kiki-bbl-state
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: kiki-integration-configs
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: kiki-deployment
  type: bosh2-deployment
  source:
    vars_store:
      provider: gcs
      config:
        bucket: ((kiki_bosh_vars_bucket))
        file_name: &kiki_vars_store_path "bosh/vars-store.yml"
        json_key: ((kiki_gcp_json_key))

# Xena resources
- name: xena-mysql-bbl-state
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: xena-mysql-deployment
  type: bosh2-deployment
  source:
    vars_store:
      provider: gcs
      config:
        bucket: ((xena_bosh_vars_bucket))
        file_name: &xena_mysql_vars_store_path "bosh-mysql/vars-store.yml"
        json_key: ((xena_gcp_json_key))

- name: xena-postgres-bbl-state
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: xena-postgres-deployment
  type: bosh2-deployment
  source:
    vars_store:
      provider: gcs
      config:
        bucket: ((xena_bosh_vars_bucket))
        file_name: &xena_postgres_vars_store_path "bosh-postgres/vars-store.yml"
        json_key: ((xena_gcp_json_key))

# Leia resources
- name: leia-azure-storage-bbl-state
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: leia-azure-storage-integration-configs
  type: git
  source:
    branch: master
    private_key: ((private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: drats
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry-incubator/disaster-recovery-acceptance-tests

jobs:
- name: cc-unit-tests
  plan:
  - aggregate:
    - get: cloud_controller_ng
      trigger: true
    - get: capi-ci
  - aggregate:
    - task: run-cc-unit-tests-mysql
      file: capi-ci/ci/test-unit/run_cc_unit_tests.yml
      params:
        DB: mysql
      on_failure:
        put: slack-alert
        params:
          text: '[cc-unit-tests] OH NO! Failed when running with mysql'
          icon_emoji: ((slack_failure_emoji))
    - task: run-cc-unit-tests-postgres
      file: capi-ci/ci/test-unit/run_cc_unit_tests.yml
      params:
        DB: postgres
      on_failure:
        put: slack-alert
        params:
          text: '[cc-unit-tests] OH NO! Failed when running with postgres'
          icon_emoji: ((slack_failure_emoji))

- name: capi-release-template-tests
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-release
      resource: capi-release-develop
      trigger: true
  - aggregate:
    - task: run-config-template-tests
      file: capi-ci/ci/test-unit/run_capi_release_config_template_tests.yml

- name: bump-capi-release
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-release
      resource: capi-release-develop
      trigger: true
    - get: cloud_controller_ng
      passed: [cc-unit-tests]
      trigger: true
    - get: diego-release
      passed: [bridge-unit-tests]
      params:
        submodules:
        - src/code.cloudfoundry.org/bbs
    - get: cc-uploader
      passed: [bridge-unit-tests]
      trigger: true
    - get: tps
      passed: [bridge-unit-tests]
      trigger: true
  - task: bump-capi-release
    file: capi-ci/ci/git/bump_capi_release.yml
  - put: capi-release-develop
    params:
      repository: bumped/capi-release
      rebase: true

- name: bridge-unit-tests
  plan:
  - aggregate:
    - get: weekly-sunday
      trigger: true
    - get: capi-release
      resource: capi-release-develop
      trigger: true
    - get: cc-uploader
      trigger: true
    - get: tps
      trigger: true
    - get: capi-ci
    - get: diego-release
      params:
        submodules:
        - src/code.cloudfoundry.org/bbs
  - task: run-bridge-unit-tests
    file: capi-ci/ci/test-unit/run_bridge_unit_tests.yml

- name: create-capi-release
  serial_groups: [version]
  serial: true
  plan:
  - aggregate:
    - get: capi-release
      resource: capi-release-develop
      passed: [bump-capi-release, capi-release-template-tests]
      trigger: true
    - get: capi-ci
    - get: version
      resource: version
      params:
        pre: rc
    - get: cloud_controller_ng
  - put: version
    params:
      file: version/version
    on_failure:
      put: slack-alert
      params:
        text: '[create-capi-release] OH NO! Failed to update version'
        icon_emoji: ((slack_failure_emoji))
  - task: create-release-tarball
    file: capi-ci/ci/bosh/create_capi_release.yml
    on_failure:
      put: slack-alert
      params:
        text: '[create-capi-release] OH NO! Failed to create tarball'
        icon_emoji: ((slack_failure_emoji))
  - put: capi-release-tarball
    params:
      file: created-capi-release/capi-*.tgz
    on_failure:
      put: slack-alert
      params:
        text: '[create-capi-release] OH NO! Failed to upload tarball'
        icon_emoji: ((slack_failure_emoji))

- name: mulan-postgres-webdav-bridge
  serial: true
  serial_groups: [deploy-mulan]
  plan:
  - aggregate:
    - get: cloud_controller_ng
      passed: [create-capi-release]
    - get: cf-deployment-concourse-tasks
    - get: cats-concourse-task
    - get: cf-deployment
      resource: cf-deployment
    - get: capi-release
      resource: capi-release-develop
      passed: [create-capi-release]
    - get: mulan-bbl-state
    - get: mulan-integration-configs
    - get: cf-acceptance-tests
    - get: sync-integration-tests
    - get: capi-ci
    - get: capi-ci-private
    - get: capi-release-tarball
      passed: [create-capi-release]
      trigger: true
  - task: upload-capi-release-tarball
    file: capi-ci/ci/bosh/upload-release.yml
    input_mapping:
      bbl-state: mulan-bbl-state
      release-tarball: capi-release-tarball
    params:
      BBL_STATE_DIR: "mulan"
  - task: mulan-stemcell-upload
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    input_mapping:
      bbl-state: mulan-bbl-state
    params:
      BBL_STATE_DIR: "mulan"
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    params:
      ENV_NAME: mulan
  - put: mulan-deployment
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *mulan-domain
        prometheus_password: ((prometheus_password))
        syslog_remote_address: ((mulan_syslog_remote_address))
        syslog_remote_port: ((mulan_syslog_remote_port))
      vars_files:
      - environment/metadata # used by prometheus bosh exporter
      ops_files:
      # Add isolation segment diego cell for CATs
      - cf-deployment/operations/test/add-persistent-isolation-segment-diego-cell.yml
      # Skip cert verification
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      # Use latest CAPI release
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
      # Use minimum number of instances for deployment
      - cf-deployment/operations/scale-to-one-az.yml
      # Scale up cells to prevent apps piling onto one cell during rolling deploy.
      # See https://github.com/cloudfoundry/capi-ci/commit/4f22dc4721aa5ed3917e84c4e0ce9f99d732a920 for details
      - capi-ci/cf-deployment-operations/scale-up-cells.yml
      # Use Credhub
      - cf-deployment/operations/experimental/secure-service-credentials.yml
      - capi-ci/cf-deployment-operations/seed-credhub-asg.yml
      # Use postgres
      - cf-deployment/operations/use-postgres.yml
      - cf-deployment/operations/experimental/enable-tls-cloud-controller-postgres.yml
      - cf-deployment/operations/experimental/secure-service-credentials-postgres.yml
      # Tell CC not to interpolate service binding refs from credhub. Used to test "non-assisted" credhub interactions.
      - capi-ci/cf-deployment-operations/disable-credhub-interpolate-service-bindings.yml
      # Metrics
      - capi-ci/cf-deployment-operations/add-prometheus.yml
      - capi-ci/cf-deployment-operations/add-prometheus-capi-homepage.yml
      # Increase logging level to include all CCDB queries
      - capi-ci/cf-deployment-operations/log-all-sequel-activity.yml
      # Silence noisy logs to reduce volume on logit.io #152155581
      - capi-ci/cf-deployment-operations/temporary/use-syslog-addon.yml
      - capi-ci/cf-deployment-operations/silence-noisy-logs.yml
      - capi-ci/cf-deployment-operations/silence-noisy-logs-isolated-diego-cell.yml
      # Disable GETs against UAA in anticipation of it being removed #148914087
      - capi-ci/cf-deployment-operations/temporary/disable-uaa-get-requests.yml
      # Enable CEF logging #151811590
      - capi-ci/cf-deployment-operations/enable-cef-security-event-logging.yml
      # Enable BPM
      - cf-deployment/operations/experimental/enable-bpm.yml
      - capi-ci/cf-deployment-operations/temporary/enable-bpm-capi.yml
      # Deployment Updater for ZDT
      - capi-ci/cf-deployment-operations/temporary/add-deployment-updater-postgres.yml
  - task: download-vars-store
    output_mapping:
      destination-directory: mulan-deployment-vars
    file: capi-ci/ci/gcs/download-from-gcs.yml
    params:
      GCP_JSON_KEY: ((mulan_gcp_json_key))
      GCP_BUCKET: ((mulan_bosh_vars_bucket))
      GCP_PATH: bosh
  - task: updated-integration-configs
    file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
    input_mapping:
      vars-store: mulan-deployment-vars
      integration-configs: mulan-integration-configs
    params:
      CATS_INTEGRATION_CONFIG_FILE: "mulan/cats_integration_config.json"
      VARS_STORE_FILE: "vars-store.yml"
      SYSTEM_DOMAIN: *mulan-domain
    ensure:
      put: mulan-integration-configs
      params:
        repository: updated-integration-configs
        rebase: true
  - task: enable-feature-flags
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      vars-store: mulan-deployment-vars
    params:
      SYSTEM_DOMAIN: *mulan-domain
      VARS_STORE_FILE: "vars-store.yml"
      ENABLED_FEATURE_FLAGS: "diego_docker"
  - aggregate:
    - task: acceptance-tests
      file: cats-concourse-task/task.yml
      input_mapping:
        integration-config: updated-integration-configs
      params:
        NODES: 6
        CONFIG_FILE_PATH: "mulan/cats_integration_config.json"
        CAPTURE_LOGS: true
    - task: sync-integration-tests
      file: sync-integration-tests/concourse/task_with_vars_store.yml
      input_mapping:
        environment: capi-ci-private
        vars-store: mulan-deployment-vars
      params:
        BOSH_DEPLOYMENT_NAME: cf
        BOSH_API_INSTANCE: api/0
        CF_API_TARGET: https://api.mulan.capi.land
        CF_SKIP_SSL_VALIDATION: true
        CF_APPS_DOMAIN: *mulan-domain
        BBL_STATE_DIR: mulan
        VARS_STORE_PATH: "vars-store.yml"
        USE_CF_DEPLOYMENT_VARS: "true"

- name: buffy-bits-postgres-webdav
  serial: true
  serial_groups: [deploy-buffy]
  plan:
  - aggregate:
    - get: cloud_controller_ng
      passed: [create-capi-release]
    - get: cf-deployment-concourse-tasks
    - get: cats-concourse-task
    - get: cf-deployment
      resource: cf-deployment
    - get: capi-release
      resource: capi-release-develop
      passed: [create-capi-release]
    - get: buffy-bbl-state
    - get: buffy-integration-configs
    - get: cf-acceptance-tests
    - get: sync-integration-tests
    - get: capi-ci
    - get: capi-ci-private
    - get: capi-release-tarball
      passed: [create-capi-release]
      trigger: true
  - task: upload-capi-release-tarball
    file: capi-ci/ci/bosh/upload-release.yml
    input_mapping:
      bbl-state: buffy-bbl-state
      release-tarball: capi-release-tarball
    params:
      BBL_STATE_DIR: "buffy"
  - task: buffy-stemcell-upload
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    input_mapping:
      bbl-state: buffy-bbl-state
    params:
      BBL_STATE_DIR: "buffy"
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    params:
      ENV_NAME: buffy
  - put: buffy-deployment
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *buffy-domain
        prometheus_password: ((prometheus_password))
        syslog_remote_address: ((buffy_syslog_remote_address))
        syslog_remote_port: ((buffy_syslog_remote_port))
      vars_files:
      - environment/metadata # used by prometheus bosh exporter
      ops_files:
      # Add isolation segment diego cell for CATs
      - cf-deployment/operations/test/add-persistent-isolation-segment-diego-cell.yml
      # Skip cert verification
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      # Use latest CAPI release
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
      - cf-deployment/operations/scale-to-one-az.yml
      # Scale up cells to prevent apps piling onto one cell during rolling deploy.
      # See https://github.com/cloudfoundry/capi-ci/commit/4f22dc4721aa5ed3917e84c4e0ce9f99d732a920 for details
      - capi-ci/cf-deployment-operations/scale-up-cells.yml
      # Use postgres
      - cf-deployment/operations/use-postgres.yml
      - cf-deployment/operations/experimental/enable-tls-cloud-controller-postgres.yml
      # Metrics
      - capi-ci/cf-deployment-operations/add-prometheus.yml
      - capi-ci/cf-deployment-operations/add-prometheus-capi-homepage.yml
      # Increase logging level to include all CCDB queries
      - capi-ci/cf-deployment-operations/log-all-sequel-activity.yml
      # Silence noisy logs to reduce volume on logit.io #152155581
      - capi-ci/cf-deployment-operations/temporary/use-syslog-addon.yml
      - capi-ci/cf-deployment-operations/silence-noisy-logs.yml
      - capi-ci/cf-deployment-operations/silence-noisy-logs-isolated-diego-cell.yml
      # Disable GETs against UAA in anticipation of it being removed #148914087
      - capi-ci/cf-deployment-operations/temporary/disable-uaa-get-requests.yml
      # Use bits service
      - cf-deployment/operations/experimental/bits-service.yml
      - cf-deployment/operations/experimental/enable-bits-service-consul.yml
      - cf-deployment/operations/experimental/bits-service-webdav.yml
      # Deployment Updater for ZDT
      - capi-ci/cf-deployment-operations/temporary/add-deployment-updater-postgres.yml
  - task: download-vars-store
    output_mapping:
      destination-directory: buffy-deployment-vars
    file: capi-ci/ci/gcs/download-from-gcs.yml
    params:
      GCP_JSON_KEY: ((buffy_gcp_json_key))
      GCP_BUCKET: ((buffy_bosh_vars_bucket))
      GCP_PATH: bosh
  - task: updated-integration-configs
    file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
    input_mapping:
      vars-store: buffy-deployment-vars
      integration-configs: buffy-integration-configs
    params:
      CATS_INTEGRATION_CONFIG_FILE: "buffy/cats_integration_config.json"
      VARS_STORE_FILE: "vars-store.yml"
      SYSTEM_DOMAIN: *buffy-domain
    ensure:
      put: buffy-integration-configs
      params:
        repository: updated-integration-configs
        rebase: true
  - task: enable-feature-flags
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      vars-store: buffy-deployment-vars
    params:
      SYSTEM_DOMAIN: *buffy-domain
      VARS_STORE_FILE: "vars-store.yml"
      ENABLED_FEATURE_FLAGS: "diego_docker"
  - aggregate:
    - task: acceptance-tests
      file: cats-concourse-task/task.yml
      input_mapping:
        integration-config: updated-integration-configs
      params:
        NODES: 6
        CONFIG_FILE_PATH: "buffy/cats_integration_config.json"
        SKIP_REGEXP: "Stages with multiple admin buildpacks"
        CAPTURE_LOGS: true
    - task: sync-integration-tests
      file: sync-integration-tests/concourse/task_with_vars_store.yml
      input_mapping:
        environment: capi-ci-private
        vars-store: buffy-deployment-vars
      params:
        BOSH_DEPLOYMENT_NAME: cf
        BOSH_API_INSTANCE: api/0
        CF_API_TARGET: https://api.buffy.capi.land
        CF_SKIP_SSL_VALIDATION: true
        CF_APPS_DOMAIN: *buffy-domain
        BBL_STATE_DIR: buffy
        VARS_STORE_PATH: "vars-store.yml"
        USE_CF_DEPLOYMENT_VARS: "true"

- name: ripley-nfs
  serial: true
  serial_groups: [deploy-ripley]
  plan:
  - aggregate:
    - get: cloud_controller_ng
      passed: [create-capi-release]
    - get: cf-deployment-concourse-tasks
    - get: cats-concourse-task
    - get: cf-deployment
      resource: cf-deployment
    - get: capi-release
      resource: capi-release-develop
      passed: [create-capi-release]
    - get: ripley-bbl-state
    - get: ripley-integration-configs
    - get: cf-acceptance-tests
    - get: sync-integration-tests
    - get: gcp-xenial-stemcell
    - get: runtime-ci
    - get: capi-ci
    - get: capi-ci-private
    - get: capi-release-tarball
      passed: [create-capi-release]
      trigger: true
  - task: upload-capi-release-tarball
    file: capi-ci/ci/bosh/upload-release.yml
    input_mapping:
      bbl-state: ripley-bbl-state
      release-tarball: capi-release-tarball
    params:
      BBL_STATE_DIR: "ripley"
  - task: ripley-linux-stemcell-upload
    file: runtime-ci/tasks/bosh-upload-stemcell/task.yml
    input_mapping:
      stemcell: gcp-xenial-stemcell
      bbl-state: ripley-bbl-state
    params:
      STEMCELL_NAME: '*.tgz'
      BBL_STATE_DIR: "ripley"
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    params:
      ENV_NAME: ripley
  - put: ripley-deployment
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *ripley-domain
        syslog_remote_address: ((ripley_syslog_remote_address))
        syslog_remote_port: ((ripley_syslog_remote_port))
        prometheus_password: ((prometheus_password))
      vars_files:
      - environment/metadata # used by prometheus bosh exporter
      ops_files:
      # Add isolation segment diego cell for CATs
      - cf-deployment/operations/test/add-persistent-isolation-segment-diego-cell.yml
      # Use minimum number of instances for deployment
      - cf-deployment/operations/scale-to-one-az.yml
      # Scale up cells to prevent apps piling onto one cell during rolling deploy.
      # See https://github.com/cloudfoundry/capi-ci/commit/4f22dc4721aa5ed3917e84c4e0ce9f99d732a920 for details
      - capi-ci/cf-deployment-operations/scale-up-cells.yml
      # Use Xenial to test nfs dependency installation
      - cf-deployment/operations/experimental/use-xenial-stemcell.yml
      # Use compiled releases
      - cf-deployment/operations/experimental/use-compiled-releases-xenial-stemcell.yml
      # Use latest CAPI release
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
      # Enable BPM
      - cf-deployment/operations/experimental/enable-bpm.yml
      - capi-ci/cf-deployment-operations/temporary/enable-bpm-capi.yml
      # Use NFS as blobstore
      - capi-ci/cf-deployment-operations/use-nfs-blobstore.yml
      # Skip cert verification
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      # Increase logging level to include all CCDB queries
      #- capi-ci/cf-deployment-operations/log-all-sequel-activity.yml
      # Silence noisy logs to reduce volume on logit.io #152155581
      - capi-ci/cf-deployment-operations/temporary/use-syslog-addon.yml
      - capi-ci/cf-deployment-operations/silence-noisy-logs.yml
      - capi-ci/cf-deployment-operations/silence-noisy-logs-isolated-diego-cell.yml
      # Metrics
      - capi-ci/cf-deployment-operations/add-prometheus.yml
      - capi-ci/cf-deployment-operations/add-prometheus-capi-homepage.yml
      # Disable GETs against UAA in anticipation of it being removed #148914087
      - capi-ci/cf-deployment-operations/temporary/disable-uaa-get-requests.yml
      # Workaround for GCP issue that causes 502s if there are empty LB instance groups #152766388
      - cf-deployment/operations/workaround/use-4-azs-for-router.yml
      # Deployment Updater for ZDT
      - capi-ci/cf-deployment-operations/temporary/add-deployment-updater.yml
      - cf-deployment/operations/experimental/use-pxc.yml
  - task: download-vars-store
    output_mapping:
      destination-directory: ripley-deployment-vars
    file: capi-ci/ci/gcs/download-from-gcs.yml
    params:
      GCP_JSON_KEY: ((ripley_gcp_json_key))
      GCP_BUCKET: ((ripley_bosh_vars_bucket))
      GCP_PATH: bosh
  - task: updated-integration-configs
    file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
    input_mapping:
      vars-store: ripley-deployment-vars
      integration-configs: ripley-integration-configs
    params:
      CATS_INTEGRATION_CONFIG_FILE: "ripley/cats_integration_config.json"
      VARS_STORE_FILE: "vars-store.yml"
      SYSTEM_DOMAIN: *ripley-domain
    ensure:
      put: ripley-integration-configs
      params:
        repository: updated-integration-configs
        rebase: true
  - task: enable-feature-flags
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      vars-store: ripley-deployment-vars
    params:
      SYSTEM_DOMAIN: *ripley-domain
      VARS_STORE_FILE: "vars-store.yml"
      ENABLED_FEATURE_FLAGS: "diego_docker"
  - aggregate:
    - task: acceptance-tests
      file: cats-concourse-task/task.yml
      input_mapping:
        integration-config: updated-integration-configs
      params:
        NODES: 6
        CONFIG_FILE_PATH: "ripley/cats_integration_config.json"
        CAPTURE_LOGS: true
    - task: sync-integration-tests
      file: sync-integration-tests/concourse/task_with_vars_store.yml
      input_mapping:
        environment: capi-ci-private
        vars-store: ripley-deployment-vars
      params:
        BOSH_DEPLOYMENT_NAME: cf
        BOSH_API_INSTANCE: api/0
        CF_API_TARGET: https://api.ripley.capi.land
        CF_SKIP_SSL_VALIDATION: true
        CF_APPS_DOMAIN: *ripley-domain
        BBL_STATE_DIR: ripley
        VARS_STORE_PATH: "vars-store.yml"
        USE_CF_DEPLOYMENT_VARS: "true"

- name: elsa-mysql-s3-bypass
  serial: true
  serial_groups: [deploy-elsa]
  plan:
  - aggregate:
    - get: cloud_controller_ng
      passed: [create-capi-release]
    - get: cf-deployment-concourse-tasks
    - get: cats-concourse-task
    - get: cf-deployment
      resource: cf-deployment
    - get: capi-release
      resource: capi-release-develop
      passed: [create-capi-release]
    - get: elsa-bbl-state
    - get: elsa-integration-configs
    - get: cf-acceptance-tests
    - get: sync-integration-tests
    - get: capi-ci
    - get: capi-ci-private
    - get: capi-release-tarball
      passed: [create-capi-release]
      trigger: true
  - task: upload-capi-release-tarball
    file: capi-ci/ci/bosh/upload-release.yml
    input_mapping:
      bbl-state: elsa-bbl-state
      release-tarball: capi-release-tarball
    params:
      BBL_STATE_DIR: "elsa"
  - task: elsa-linux-stemcell-upload
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    input_mapping:
      bbl-state: elsa-bbl-state
    params:
      BBL_STATE_DIR: "elsa"
  - task: elsa-windows-stemcell-upload
    file: capi-ci/ci/bosh/upload-windows-stemcell-for-gcp.yml
    input_mapping:
      bbl-state: elsa-bbl-state
    params:
      BBL_STATE_DIR: "elsa"
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    params:
      ENV_NAME: elsa
  - put: elsa-aws-storage-terraform
    params:
      env_name: elsa
      terraform_source: capi-ci/terraform/aws-s3-buckets/
      vars:
        aws_access_key: ((wasabi_aws_access_key))
        aws_secret_key: ((wasabi_aws_secret_key))
        cdn_key_pair_id: ((wasabi_cdn_key_pair_id))
        cdn_private_key: ((wasabi_cdn_private_key))
  - put: elsa-deployment
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *elsa-domain
        datadog_api_key: ((elsa_datadog_api_key))
        datadog_metric_prefix: "datadog.nozzle."
        new_relic_license_key: ((new_relic_license_key))
        syslog_remote_address: ((elsa_syslog_remote_address))
        syslog_remote_port: ((elsa_syslog_remote_port))
        prometheus_password: ((prometheus_password))
      vars_files:
      - elsa-aws-storage-terraform/metadata
      - environment/metadata # used by prometheus bosh exporter
      - capi-ci-private/elsa/certs/router/certs.yml
      ops_files:
      # Add isolation segment diego cell for CATs
      - cf-deployment/operations/test/add-persistent-isolation-segment-diego-cell.yml
      # Add windows diego cell
      - cf-deployment/operations/windows-cell.yml
      - capi-ci/cf-deployment-operations/skip-cert-verify-on-windows-cell.yml
      - capi-ci/cf-deployment-operations/windows-cell-consul-mutual-tls.yml
      # Use rotatable database encryption keys
      - capi-ci/cf-deployment-operations/rotate-cc-database-key/add-database-encryption-keys.yml
      # Scale up cells to prevent apps piling onto one cell during rolling deploy.
      # See https://github.com/cloudfoundry/capi-ci/commit/4f22dc4721aa5ed3917e84c4e0ce9f99d732a920 for details
      - capi-ci/cf-deployment-operations/scale-up-cells.yml
      # Use latest CAPI release
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
      # Use S3 as blobstore
      - capi-ci/cf-deployment-operations/use-s3-and-cdn-storage.yml
      # Use clustered mysql
      - cf-deployment/operations/scale-database-cluster.yml
      # Metrics
      - capi-ci/cf-deployment-operations/add-datadog-firehose-nozzle-gcp.yml
      - capi-ci/cf-deployment-operations/add-new-relic.yml
      - capi-ci/cf-deployment-operations/add-prometheus.yml
      - capi-ci/cf-deployment-operations/add-prometheus-capi-homepage.yml
      # Disable skip-cert-verify because this env has a real cert
      - capi-ci/cf-deployment-operations/disable-skip-cert-verify.yml
      - capi-ci/cf-deployment-operations/disable-skip-cert-verify-iso-seg.yml
      # Increase logging level to include all CCDB queries
      - capi-ci/cf-deployment-operations/log-all-sequel-activity.yml
      # Silence noisy logs to reduce volume on logit.io #152155581
      - capi-ci/cf-deployment-operations/temporary/use-syslog-addon.yml
      - capi-ci/cf-deployment-operations/silence-noisy-logs.yml
      - capi-ci/cf-deployment-operations/silence-noisy-logs-isolated-diego-cell.yml
      # Disable GETs against UAA in anticipation of it being removed #148914087
      - capi-ci/cf-deployment-operations/temporary/disable-uaa-get-requests.yml
      # Use Credhub
      - cf-deployment/operations/experimental/secure-service-credentials.yml
      - capi-ci/cf-deployment-operations/seed-credhub-asg.yml
      # Credhub requires UAA auth so we must allow containers to talk to UAA
      - capi-ci/cf-deployment-operations/seed-uaa-asg.yml
      # Add certs for Windows cells.
      - cf-deployment/operations/experimental/secure-service-credentials-windows-cell.yml
      # Workaround for GCP issue that causes 502s if there are empty LB instance groups #152766388
      - cf-deployment/operations/workaround/use-4-azs-for-router.yml
      # Deployment Updater for ZDT
      - capi-ci/cf-deployment-operations/temporary/add-deployment-updater.yml
      # Perm!
      - cf-deployment/operations/experimental/enable-bpm.yml
      - cf-deployment/operations/experimental/perm-service.yml
      # Move to pxc
      - capi-ci/cf-deployment-operations/temporary/use-single-database-instance-group.yml
      - cf-deployment/operations/experimental/use-pxc.yml
  - task: download-vars-store
    output_mapping:
      destination-directory: elsa-deployment-vars
    file: capi-ci/ci/gcs/download-from-gcs.yml
    params:
      GCP_JSON_KEY: ((elsa_gcp_json_key))
      GCP_BUCKET: ((elsa_bosh_vars_bucket))
      GCP_PATH: bosh
  - task: updated-integration-configs
    file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
    input_mapping:
      vars-store: elsa-deployment-vars
      integration-configs: elsa-integration-configs
    params:
      CATS_INTEGRATION_CONFIG_FILE: "elsa/cats_integration_config.json"
      VARS_STORE_FILE: "vars-store.yml"
      SYSTEM_DOMAIN: *elsa-domain
    ensure:
      put: elsa-integration-configs
      params:
        repository: updated-integration-configs
        rebase: true
  - task: enable-feature-flags
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      vars-store: elsa-deployment-vars
    params:
      SYSTEM_DOMAIN: *elsa-domain
      VARS_STORE_FILE: "vars-store.yml"
      ENABLED_FEATURE_FLAGS: "diego_docker"
  - aggregate:
    - task: acceptance-tests
      file: cats-concourse-task/task.yml
      input_mapping:
        integration-config: updated-integration-configs
      params:
        NODES: 8
        CONFIG_FILE_PATH: "elsa/cats_integration_config.json"
        CAPTURE_LOGS: true
    - task: sync-integration-tests
      file: sync-integration-tests/concourse/task_with_vars_store.yml
      input_mapping:
        environment: capi-ci-private
        vars-store: elsa-deployment-vars
      params:
        BOSH_DEPLOYMENT_NAME: cf
        BOSH_API_INSTANCE: api/0
        CF_API_TARGET: https://api.elsa.capi.land
        CF_SKIP_SSL_VALIDATION: false
        CF_APPS_DOMAIN: *elsa-domain
        BBL_STATE_DIR: elsa
        VARS_STORE_PATH: "vars-store.yml"
        USE_CF_DEPLOYMENT_VARS: "true"

- name: kiki-back-compat-migrations
  serial: true
  serial_groups: [deploy-kiki]
  plan:
  - aggregate:
    - get: cloud_controller_ng
      passed: [create-capi-release]
    - get: cf-deployment-concourse-tasks
    - get: cf-deployment
      resource: cf-deployment-master
    - get: kiki-bbl-state
    - get: kiki-integration-configs
    - get: sync-integration-tests
    - get: capi-ci
    - get: capi-ci-private
    - get: capi-release
      passed:
      - create-capi-release
      resource: capi-release-develop
    - get: capi-release-tarball
      passed:
      - create-capi-release
      trigger: true
    - get: cf-acceptance-tests
    - get: runtime-ci
  - task: kiki-stemcell-upload
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    input_mapping:
      bbl-state: kiki-bbl-state
    params:
      BBL_STATE_DIR: "kiki"
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    params:
      ENV_NAME: kiki
  - put: kiki-deployment # delete-deployment
    params:
      source_file: environment/metadata
      delete:
        enabled: true
  - task: add-bosh-dns-runtime-config
    file: capi-ci/ci/bbl-tasks/update-runtime-config.yml
    input_mapping:
      bbl-state: capi-ci-private
    params:
      BBL_STATE_DIR: "kiki"
      RUNTIME_CONFIG_PATH: "bosh-deployment/runtime-configs/dns.yml"
      RUNTIME_CONFIG_NAME: "dns"
  - put: kiki-deployment
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *kiki-domain
        prometheus_password: ((prometheus_password))
        syslog_remote_address: ((kiki_syslog_remote_address))
        syslog_remote_port: ((kiki_syslog_remote_port))
      vars_files:
      - environment/metadata # used by prometheus bosh exporter
      ops_files:
      # Add isolation segment diego cell for CATs
      - cf-deployment/operations/test/add-persistent-isolation-segment-diego-cell.yml
      # Skip cert verification
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      # Use minimum number of instances for deployment
      - cf-deployment/operations/scale-to-one-az.yml
      # Scale up cells to prevent apps piling onto one cell during rolling deploy.
      # See https://github.com/cloudfoundry/capi-ci/commit/4f22dc4721aa5ed3917e84c4e0ce9f99d732a920 for details
      - capi-ci/cf-deployment-operations/scale-up-cells.yml
      # Use postgres
      - cf-deployment/operations/use-postgres.yml
      # Metrics
      - capi-ci/cf-deployment-operations/add-prometheus.yml
      - capi-ci/cf-deployment-operations/add-prometheus-capi-homepage.yml
      # Increase logging level to include all CCDB queries
      - capi-ci/cf-deployment-operations/log-all-sequel-activity.yml
      # Disable GETs against UAA in anticipation of it being removed #148914087
      - capi-ci/cf-deployment-operations/temporary/disable-uaa-get-requests.yml
      # Silence noisy logs to reduce volume on logit.io #152155581
      - capi-ci/cf-deployment-operations/temporary/use-syslog-addon.yml
      - capi-ci/cf-deployment-operations/silence-noisy-logs.yml
      - capi-ci/cf-deployment-operations/silence-noisy-logs-isolated-diego-cell.yml
      # Workaround for GCP issue that causes 502s if there are empty LB instance groups #152766388
      - cf-deployment/operations/workaround/use-4-azs-for-router.yml
  - task: ensure-api-healthy
    file: runtime-ci/tasks/ensure-api-healthy/task.yml
    params:
      SYSTEM_DOMAIN: *kiki-domain
  - task: apply-cc-migrations
    file: capi-ci/ci/migrations/apply_latest_migrations.yml
    params:
      BBL_STATE_DIR: "kiki"
  - task: download-vars-store
    output_mapping:
      destination-directory: kiki-deployment-vars
    file: capi-ci/ci/gcs/download-from-gcs.yml
    params:
      GCP_JSON_KEY: ((kiki_gcp_json_key))
      GCP_BUCKET: ((kiki_bosh_vars_bucket))
      GCP_PATH: bosh
  - task: updated-integration-configs
    file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
    input_mapping:
      vars-store: kiki-deployment-vars
      integration-configs: kiki-integration-configs
    params:
      CATS_INTEGRATION_CONFIG_FILE: "kiki/cats_integration_config.json"
      SYSTEM_DOMAIN: *kiki-domain
      VARS_STORE_FILE: "vars-store.yml"
    ensure:
      put: kiki-integration-configs
      params:
        repository: updated-integration-configs
        rebase: true
  - task: enable-feature-flags
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      vars-store: kiki-deployment-vars
    params:
      SYSTEM_DOMAIN: *kiki-domain
      VARS_STORE_FILE: "vars-store.yml"
      ENABLED_FEATURE_FLAGS: "diego_docker"
  - aggregate:
    - task: run-cats
      file: cf-deployment-concourse-tasks/run-cats/task.yml
      input_mapping:
        integration-config: updated-integration-configs
      params:
        NODES: 4
        CONFIG_FILE_PATH: "kiki/cats_integration_config.json"
        CAPTURE_LOGS: true
    - task: sync-integration-tests
      file: sync-integration-tests/concourse/task_with_vars_store.yml
      input_mapping:
        environment: capi-ci-private
        vars-store: kiki-deployment-vars
      params:
        BOSH_DEPLOYMENT_NAME: cf
        BOSH_API_INSTANCE: api/0
        CF_API_TARGET: https://api.kiki.capi.land
        CF_SKIP_SSL_VALIDATION: true
        CF_APPS_DOMAIN: *kiki-domain
        BBL_STATE_DIR: kiki
        VARS_STORE_PATH: "vars-store.yml"
        USE_CF_DEPLOYMENT_VARS: "true"
  - put: kiki-deployment # delete-deployment
    params:
      source_file: environment/metadata
      delete:
        enabled: true

- name: ship-it
  serial_groups: [version]
  plan:
  - aggregate:
    - get: cloud_controller_ng
      passed: [bump-ci-passed]
    - get: capi-ci
    - get: capi-ci-private
    - get: capi-release
      resource: capi-release-ci-passed
      passed: [bump-ci-passed]
    - get: capi-release-tarball
      passed: [bump-ci-passed]
    - get: version
      params: {bump: final}
  - put: version
    params: {file: version/version}
  - task: finalize-release
    file: capi-ci/ci/bosh/finalize-release.yml
  - put: capi-final-releases
    params:
      file: finalized-release-tarball/capi-*.tgz
  - put: capi-release
    resource: capi-release-master
    params:
      repository: finalized-release-git-repo/capi-release
      tag: version/version
  - put: version
    params:
      bump: minor
  - task: block
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: ubuntu}
      run:
        path: echo
        args: ["Way to go, Zach!"]

- name: push-github-release
  serial_groups: [version]
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-release
      resource: capi-release-master
      passed: [ship-it]
    - get: capi-final-releases
      passed: [ship-it]
      trigger: true
    - get: github-published-release
      params:
        globs: []
  - task: generate-github-release
    file: capi-ci/ci/git/generate_github_release.yml
  - put: github-release
    params:
      body: generated-release/body
      commitish: generated-release/commitish
      name: generated-release/name
      tag: generated-release/version
      globs:
      - generated-release/*.tgz

- name: rc-docs-v3
  serial: true
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-release
      resource: capi-release-ci-passed
      trigger: true
      params:
        submodules:
        - src/cloud_controller_ng
  - task: push-rc-docs-v3
    file: capi-ci/ci/docs/push_rc_docs_v3.yml
    params: &docs-aws-account
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ((docs_s3_access_key))
      AWS_SECRET_ACCESS_KEY: ((docs_s3_secret_key))
      GITHUB_PUSH_KEY: ((private_key))
    on_failure:
      put: slack-alert
      params:
        text: '[rc-docs-v3] OH NO! Failed to update documentation https://capi.ci.cf-app.com/?groups=migrations-dependencies-docs'
        icon_emoji: ((slack_failure_emoji))

- name: update-and-push-docs-v2
  serial: true
  plan:
  - aggregate:
    - get: cf-deployment-release
      trigger: true
    - get: cf-deployment-master
    - get: capi-ci
    - get: api-docs
    - get: capi-release-master
      params:
        submodules:
        - src/cloud_controller_ng
  - task: update-docs-v2
    file: capi-ci/ci/docs/update_docs_v2.yml
    params:
      CF_VERSIONS_FILE_PATH: api-docs/data/cf-deployment-api-versions.json
      GIT_COMMIT_USERNAME: "CAPI CI"
      GIT_COMMIT_EMAIL: "cf-capi-eng+ci@pivotal.io"
    input_mapping:
      capi-release: capi-release-master
      cf-deployment: cf-deployment-master
  - put: api-docs
    resource: api-docs
    params:
      repository: updated-api-docs/api-docs
      branch: master
      rebase: true
  - put: api-docs-production-deploy
    params:
      manifest: updated-api-docs/api-docs/manifest-sample.yml

- name: bump-cc-v3-api
  serial: true
  plan:
  - aggregate:
    # we are using version as an input to gate on ship-it using a cheap to get resource
    # it is not actually a necessary input for this job
    - get: version
      passed: [ship-it]
      trigger: true
    - get: cc-api-v3-version
  - put: cc-api-v3-version
    params:
      bump: minor

- name: bump-cc-v2-api
  serial: true
  plan:
  - aggregate:
    # we are using version as an input to gate on ship-it using a cheap to get resource
    # it is not actually a necessary input for this job
    - get: version
      passed: [ship-it]
      trigger: true
    - get: cc-api-v2-version
  - put: cc-api-v2-version
    params:
      bump: minor

- name: update-api-info-v2-docs
  serial: true
  plan:
  - aggregate:
    - get: capi-ci
    - get: cc-api-v2-version
      trigger: true
      passed: [bump-cc-v2-api]
    - get: cloud_controller_ng
  - task: update-api-info-v2-docs
    file: capi-ci/ci/docs/update_v2_docs_info_api_version.yml
  - put: cloud_controller_ng
    params:
      repository: cloud_controller_ng_bumped_docs/cloud_controller_ng
      rebase: true

- name: publish-docs-v3
  serial: true
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-release
      resource: capi-release-master
      trigger: true
      passed: [ship-it]
      params:
        submodules:
        - src/cloud_controller_ng
  - task: push-docs-v3
    file: capi-ci/ci/docs/push_docs_v3.yml
    privileged: true
    params:
      GITHUB_PUSH_KEY: ((private_key))
    on_failure:
      put: slack-alert
      params:
        text: '[publish-docs-v3] OH NO! Failed to update documentation https://capi.ci.cf-app.com/?groups=migrations-dependencies-docs'
        icon_emoji: ((slack_failure_emoji))

- name: update-checkman
  plan:
  - aggregate:
    - get: capi-ci
      trigger: true
    - get: capi-checkman
  - task: update-checkman
    file: capi-ci/ci/monitoring/update_checkman.yml
    params:
      IGNORED_JOBS: "buffy-bits-postgres-webdav"
    on_success:
      put: slack-alert
      params:
        text: '[update-checkman] Checkman configuration successfully updated'
        icon_emoji: ':capi:'
    on_failure:
      put: slack-alert
      params:
        text: '[update-checkman] OH NO! There was a problem updating configuration! https://capi.ci.cf-app.com/?groups=migrations-dependencies-docs'
        icon_emoji: ((slack_failure_emoji))
  - put: capi-checkman
    params:
      repository: updated-capi-checkman
      rebase: true

# This GCP project exists mainly to house our bosh-lites,
# but we deploy a bosh in case we need to deploy something
# short-term for an investigation.
- name: update-bosh-arya
  serial: true
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: arya-bbl-state
    - get: capi-ci
    - get: capi-ci-private
    - get: weekly-sunday
      trigger: true
  - task: seed-capi-ci-private
    file: capi-ci/ci/setup-environment/seed.yml
    params:
      ENVIRONMENT: arya
      DOMAIN: &arya-domain "arya.capi.land"
  - put: capi-ci-private
    params:
      repository: updated-capi-ci-private
      rebase: true
  - task: update-bosh-arya
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
      bbl-config: updated-capi-ci-private
      ops-files: capi-ci
    params:
      BBL_STATE_DIR: "arya"
      BBL_IAAS: "gcp"
      BBL_LB_CERT: "certs/load-balancer/server.crt"
      BBL_LB_KEY: "certs/load-balancer/server.key"
      LB_DOMAIN: *arya-domain
      BBL_ENV_NAME: "arya"
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((arya_gcp_json_key))
      BBL_GCP_PROJECT_ID: ((arya_gcp_project_id))
      BBL_GCP_ZONE: ((arya_gcp_zone))
      BBL_GCP_REGION: ((arya_gcp_region))
      OPS_FILES: |
        bosh-director-operations/increase-persistent-disk.yml
    ensure:
      put: arya-bbl-state
      params:
        repository: updated-bbl-state
        rebase: true
  - task: add-bosh-dns-runtime-config
    file: capi-ci/ci/bbl-tasks/update-runtime-config.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
    params:
      BBL_STATE_DIR: "arya"
      RUNTIME_CONFIG_PATH: "bosh-deployment/runtime-configs/dns.yml"
      RUNTIME_CONFIG_NAME: "dns"
  - task: create-dns-record
    attempts: 3
    file: capi-ci/ci/bbl-tasks/create-dns-record.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "arya"
      DNS_DOMAIN: *arya-domain
      GCP_DNS_SERVICE_ACCOUNT_KEY: ((dns_gcp_json_key))
      GCP_PROJECT_ID: ((dns_gcp_project_id))
      SHARED_DNS_ZONE_NAME: "capi-land"
  - task: run-bosh-cleanup
    file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "arya"

- name: update-bosh-mulan
  serial: true
  serial_groups: [deploy-mulan]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: mulan-bbl-state
    - get: capi-ci
    - get: capi-ci-private
    - get: bosh-deployment
      version: { ref: *BOSH_DEPLOYMENT_VERSION }
    - get: weekly-sunday
      trigger: true
  - task: seed-capi-ci-private
    file: capi-ci/ci/setup-environment/seed.yml
    params:
      ENVIRONMENT: mulan
      DOMAIN: &mulan-domain "mulan.capi.land"
  - put: capi-ci-private
    params:
      repository: updated-capi-ci-private
      rebase: true
  - task: collect-ops-files
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    input_mapping:
      base-ops-files: bosh-deployment
      new-ops-files: capi-ci
    params:
      NEW_OPS_FILES: bosh-director-operations/increase-persistent-disk.yml
  - task: update-bosh-mulan
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
      bbl-config: updated-capi-ci-private
      ops-files: collected-ops-files
    params:
      BBL_STATE_DIR: "mulan"
      BBL_IAAS: "gcp"
      BBL_LB_CERT: "certs/load-balancer/server.crt"
      BBL_LB_KEY: "certs/load-balancer/server.key"
      LB_DOMAIN: *mulan-domain
      BBL_ENV_NAME: "mulan"
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((mulan_gcp_json_key))
      BBL_GCP_PROJECT_ID: ((mulan_gcp_project_id))
      BBL_GCP_ZONE: ((mulan_gcp_zone))
      BBL_GCP_REGION: ((mulan_gcp_region))
      OPS_FILES: |
        base-ops-files/local-dns.yml
        increase-persistent-disk.yml
    ensure:
      put: mulan-bbl-state
      params:
        repository: updated-bbl-state
        rebase: true
  - task: add-bosh-dns-runtime-config
    file: capi-ci/ci/bbl-tasks/update-runtime-config.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
    params:
      BBL_STATE_DIR: "mulan"
      RUNTIME_CONFIG_PATH: "bosh-deployment/runtime-configs/dns.yml"
      RUNTIME_CONFIG_NAME: "dns"
  - task: create-dns-record
    attempts: 3
    file: capi-ci/ci/bbl-tasks/create-dns-record.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "mulan"
      DNS_DOMAIN: *mulan-domain
      GCP_DNS_SERVICE_ACCOUNT_KEY: ((dns_gcp_json_key))
      GCP_PROJECT_ID: ((dns_gcp_project_id))
      SHARED_DNS_ZONE_NAME: "capi-land"
  - task: run-bosh-cleanup
    file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "mulan"

- name: update-bosh-buffy
  serial: true
  serial_groups: [deploy-buffy]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: buffy-bbl-state
    - get: capi-ci
    - get: capi-ci-private
    - get: weekly-sunday
      trigger: true
  - task: seed-capi-ci-private
    file: capi-ci/ci/setup-environment/seed.yml
    params:
      ENVIRONMENT: buffy
      DOMAIN: &buffy-domain "buffy.capi.land"
  - put: capi-ci-private
    params:
      repository: updated-capi-ci-private
      rebase: true
  - task: update-bosh-buffy
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
      bbl-config: updated-capi-ci-private
      ops-files: capi-ci
    params:
      BBL_STATE_DIR: "buffy"
      BBL_IAAS: "gcp"
      BBL_LB_CERT: "certs/load-balancer/server.crt"
      BBL_LB_KEY: "certs/load-balancer/server.key"
      LB_DOMAIN: *buffy-domain
      BBL_ENV_NAME: "buffy"
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((buffy_gcp_json_key))
      BBL_GCP_PROJECT_ID: ((buffy_gcp_project_id))
      BBL_GCP_ZONE: ((buffy_gcp_zone))
      BBL_GCP_REGION: ((buffy_gcp_region))
      OPS_FILES: |
        bosh-director-operations/increase-persistent-disk.yml
    ensure:
      put: buffy-bbl-state
      params:
        repository: updated-bbl-state
        rebase: true
  - task: add-bosh-dns-runtime-config
    file: capi-ci/ci/bbl-tasks/update-runtime-config.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
    params:
      BBL_STATE_DIR: "buffy"
      RUNTIME_CONFIG_PATH: "bosh-deployment/runtime-configs/dns.yml"
      RUNTIME_CONFIG_NAME: "dns"
  - task: create-dns-record
    attempts: 3
    file: capi-ci/ci/bbl-tasks/create-dns-record.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "buffy"
      DNS_DOMAIN: *buffy-domain
      GCP_DNS_SERVICE_ACCOUNT_KEY: ((dns_gcp_json_key))
      GCP_PROJECT_ID: ((dns_gcp_project_id))
      SHARED_DNS_ZONE_NAME: "capi-land"
  - task: run-bosh-cleanup
    file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "buffy"

- name: update-bosh-ripley
  serial: true
  serial_groups: [deploy-ripley]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: ripley-bbl-state
    - get: capi-ci
    - get: capi-ci-private
    - get: weekly-sunday
      trigger: true
  - task: seed-capi-ci-private
    file: capi-ci/ci/setup-environment/seed.yml
    params:
      ENVIRONMENT: ripley
      DOMAIN: &ripley-domain "ripley.capi.land"
  - put: capi-ci-private
    params:
      repository: updated-capi-ci-private
      rebase: true
  - task: update-bosh-ripley
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
      bbl-config: updated-capi-ci-private
      ops-files: capi-ci
    params:
      BBL_STATE_DIR: "ripley"
      BBL_IAAS: "gcp"
      BBL_LB_CERT: "certs/load-balancer/server.crt"
      BBL_LB_KEY: "certs/load-balancer/server.key"
      LB_DOMAIN: *ripley-domain
      BBL_ENV_NAME: "ripley"
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((ripley_gcp_json_key))
      BBL_GCP_PROJECT_ID: ((ripley_gcp_project_id))
      BBL_GCP_ZONE: ((ripley_gcp_zone))
      BBL_GCP_REGION: ((ripley_gcp_region))
      OPS_FILES: |
        bosh-director-operations/increase-persistent-disk.yml
    ensure:
      put: ripley-bbl-state
      params:
        repository: updated-bbl-state
        rebase: true
  - task: add-bosh-dns-runtime-config
    file: capi-ci/ci/bbl-tasks/update-runtime-config.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
    params:
      BBL_STATE_DIR: "ripley"
      RUNTIME_CONFIG_PATH: "bosh-deployment/runtime-configs/dns.yml"
      RUNTIME_CONFIG_NAME: "dns"
  - task: create-dns-record
    attempts: 3
    file: capi-ci/ci/bbl-tasks/create-dns-record.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "ripley"
      DNS_DOMAIN: *ripley-domain
      GCP_DNS_SERVICE_ACCOUNT_KEY: ((dns_gcp_json_key))
      GCP_PROJECT_ID: ((dns_gcp_project_id))
      SHARED_DNS_ZONE_NAME: "capi-land"
  - task: run-bosh-cleanup
    file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "ripley"

- name: update-bosh-elsa
  serial: true
  serial_groups: [deploy-elsa]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: elsa-bbl-state
    - get: capi-ci
    - get: capi-ci-private
    - get: bosh-deployment
      version: { ref: *BOSH_DEPLOYMENT_VERSION }
    - get: weekly-sunday
      trigger: true
  - task: seed-capi-ci-private
    file: capi-ci/ci/setup-environment/seed.yml
    params:
      ENVIRONMENT: elsa
      DOMAIN:   &elsa-domain "elsa.capi.land"
  - put: capi-ci-private
    params:
      repository: updated-capi-ci-private
      rebase: true
  - task: collect-ops-files
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    input_mapping:
      base-ops-files: bosh-deployment
      new-ops-files: capi-ci
    params:
      NEW_OPS_FILES: bosh-director-operations/increase-persistent-disk.yml
  - task: update-bosh-elsa
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
      bbl-config: updated-capi-ci-private
      ops-files: collected-ops-files
    params:
      BBL_STATE_DIR: "elsa"
      BBL_IAAS: "gcp"
      BBL_LB_CERT: "certs/load-balancer/server.crt"
      BBL_LB_KEY: "certs/load-balancer/server.key"
      LB_DOMAIN: *elsa-domain
      BBL_ENV_NAME: "elsa"
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((elsa_gcp_json_key))
      BBL_GCP_PROJECT_ID: ((elsa_gcp_project_id))
      BBL_GCP_ZONE: ((elsa_gcp_zone))
      BBL_GCP_REGION: ((elsa_gcp_region))
      OPS_FILES: |
        base-ops-files/local-dns.yml
        increase-persistent-disk.yml
    ensure:
      put: elsa-bbl-state
      params:
        repository: updated-bbl-state
        rebase: true
  - task: add-bosh-dns-runtime-config
    file: capi-ci/ci/bbl-tasks/update-runtime-config.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
    params:
      BBL_STATE_DIR: "elsa"
      RUNTIME_CONFIG_PATH: "bosh-deployment/runtime-configs/dns.yml"
      RUNTIME_CONFIG_NAME: "dns"
  - task: create-dns-record
    attempts: 3
    file: capi-ci/ci/bbl-tasks/create-dns-record.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "elsa"
      DNS_DOMAIN: *elsa-domain
      GCP_DNS_SERVICE_ACCOUNT_KEY: ((dns_gcp_json_key))
      GCP_PROJECT_ID: ((dns_gcp_project_id))
      SHARED_DNS_ZONE_NAME: "capi-land"
  - task: run-bosh-cleanup
    file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "elsa"

- name: update-bosh-kiki
  serial: true
  serial_groups: [deploy-kiki]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: capi-ci
    - get: capi-ci-private
    - get: weekly-sunday
      trigger: true
  - task: seed-capi-ci-private
    file: capi-ci/ci/setup-environment/seed.yml
    params:
      ENVIRONMENT: kiki
      DOMAIN: &kiki-domain "kiki.capi.land"
  - put: capi-ci-private
    params:
      repository: updated-capi-ci-private
      rebase: true
  - task: update-bosh-kiki
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
      bbl-config: updated-capi-ci-private
      ops-files: capi-ci
    params:
      BBL_STATE_DIR: "kiki"
      BBL_IAAS: "gcp"
      BBL_LB_CERT: "certs/load-balancer/server.crt"
      BBL_LB_KEY: "certs/load-balancer/server.key"
      BBL_CONFIG_DIR: "kiki/plan-patch"
      LB_DOMAIN: *kiki-domain
      BBL_ENV_NAME: "kiki"
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((kiki_gcp_json_key))
      BBL_GCP_PROJECT_ID: ((kiki_gcp_project_id))
      BBL_GCP_ZONE: ((kiki_gcp_zone))
      BBL_GCP_REGION: ((kiki_gcp_region))
      OPS_FILES: |
        bosh-director-operations/increase-persistent-disk.yml
    ensure:
      put: kiki-bbl-state
      params:
        repository: updated-bbl-state
        rebase: true
  - task: create-dns-record
    attempts: 3
    file: capi-ci/ci/bbl-tasks/create-dns-record.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "kiki"
      DNS_DOMAIN: *kiki-domain
      GCP_DNS_SERVICE_ACCOUNT_KEY: ((dns_gcp_json_key))
      GCP_PROJECT_ID: ((dns_gcp_project_id))
      SHARED_DNS_ZONE_NAME: "capi-land"
  - task: run-bosh-cleanup
    file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "kiki"

- name: update-bosh-xena-mysql
  serial: true
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: xena-mysql-bbl-state
    - get: capi-ci
    - get: capi-ci-private
    - get: cf-deployment
    - get: nightly
      trigger: true
    - get: bosh-deployment
      version: { ref: *BOSH_DEPLOYMENT_VERSION }
  - task: seed-capi-ci-private
    file: capi-ci/ci/setup-environment/seed.yml
    params:
      ENVIRONMENT: xena-mysql
      DOMAIN: &xena-mysql-domain "xena-mysql.capi.land"
  - put: capi-ci-private
    params:
      repository: updated-capi-ci-private
      rebase: true
  - task: collect-ops-files
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    input_mapping:
      base-ops-files: bosh-deployment
      new-ops-files: capi-ci
    params:
      NEW_OPS_FILES: bosh-director-operations/increase-persistent-disk.yml
  - task: update-bosh-xena-mysql
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
      bbl-config: updated-capi-ci-private
      ops-files: collected-ops-files
    params:
      BBL_STATE_DIR: "xena-mysql"
      BBL_IAAS: "gcp"
      BBL_CONFIG_DIR: "xena-mysql/bosh-lite-plan-patch"
      BBL_ENV_NAME: "xena-mysql"
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((xena_gcp_json_key))
      BBL_GCP_PROJECT_ID: ((xena_gcp_project_id))
      BBL_GCP_ZONE: ((xena_gcp_zone))
      BBL_GCP_REGION: ((xena_gcp_region))
      IS_BOSH_LITE: true
      SKIP_LB_CREATION: true
      OPS_FILES: |
        base-ops-files/bosh-lite.yml
        base-ops-files/bosh-lite-runc.yml
        base-ops-files/gcp/bosh-lite-vm-type.yml
        increase-persistent-disk.yml
    ensure:
      put: xena-mysql-bbl-state
      params:
        repository: updated-bbl-state
        rebase: true
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    input_mapping:
      capi-ci-private: updated-bbl-state
    params:
      ENV_NAME: xena-mysql
  - task: update-cloud-config
    file: capi-ci/ci/bosh/update_cloud_config.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
      cloud-config: cf-deployment
    params:
      BBL_STATE_DIR: "xena-mysql"
      CLOUD_CONFIG_PATH: iaas-support/bosh-lite/cloud-config.yml
  - task: create-dns-record
    attempts: 3
    file: capi-ci/ci/bbl-tasks/create-dns-record.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "xena-mysql"
      DNS_DOMAIN: *xena-mysql-domain
      GCP_DNS_SERVICE_ACCOUNT_KEY: ((dns_gcp_json_key))
      GCP_PROJECT_ID: ((dns_gcp_project_id))
      SHARED_DNS_ZONE_NAME: "capi-land"
      IS_BOSH_LITE: true
  - task: run-bosh-cleanup
    file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "xena-mysql"
  - task: add-bosh-dns-runtime-config
    file: capi-ci/ci/bbl-tasks/update-runtime-config.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
    params:
      BBL_STATE_DIR: "xena-mysql"
      RUNTIME_CONFIG_PATH: "bosh-deployment/runtime-configs/dns.yml"
      RUNTIME_CONFIG_NAME: "dns"

- name: update-bosh-xena-postgres
  serial: true
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: xena-postgres-bbl-state
    - get: capi-ci
    - get: capi-ci-private
    - get: cf-deployment
    - get: nightly
      trigger: true
    - get: bosh-deployment
      version: { ref: *BOSH_DEPLOYMENT_VERSION }
  - task: seed-capi-ci-private
    file: capi-ci/ci/setup-environment/seed.yml
    params:
      ENVIRONMENT: xena-postgres
      DOMAIN: &xena-postgres-domain "xena-postgres.capi.land"
  - put: capi-ci-private
    params:
      repository: updated-capi-ci-private
      rebase: true
  - task: collect-ops-files
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    input_mapping:
      base-ops-files: bosh-deployment
      new-ops-files: capi-ci
    params:
      NEW_OPS_FILES: bosh-director-operations/increase-persistent-disk.yml
  - task: update-bosh-xena-postgres
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
      bbl-config: updated-capi-ci-private
      ops-files: collected-ops-files
    params:
      BBL_STATE_DIR: "xena-postgres"
      BBL_IAAS: "gcp"
      BBL_CONFIG_DIR: "xena-postgres/bosh-lite-plan-patch"
      BBL_ENV_NAME: "xena-postgres"
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((xena_gcp_json_key))
      BBL_GCP_PROJECT_ID: ((xena_gcp_project_id))
      BBL_GCP_ZONE: ((xena_gcp_zone))
      BBL_GCP_REGION: ((xena_gcp_region))
      IS_BOSH_LITE: true
      SKIP_LB_CREATION: true
      OPS_FILES: |
        base-ops-files/bosh-lite.yml
        base-ops-files/gcp/bosh-lite-vm-type.yml
        increase-persistent-disk.yml
    ensure:
      put: xena-postgres-bbl-state
      params:
        repository: updated-bbl-state
        rebase: true
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    input_mapping:
      capi-ci-private: updated-bbl-state
    params:
      ENV_NAME: xena-postgres
  - task: update-cloud-config
    file: capi-ci/ci/bosh/update_cloud_config.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
      cloud-config: cf-deployment
    params:
      BBL_STATE_DIR: "xena-postgres"
      CLOUD_CONFIG_PATH: iaas-support/bosh-lite/cloud-config.yml
  - task: create-dns-record
    attempts: 3
    file: capi-ci/ci/bbl-tasks/create-dns-record.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "xena-postgres"
      DNS_DOMAIN: *xena-postgres-domain
      GCP_DNS_SERVICE_ACCOUNT_KEY: ((dns_gcp_json_key))
      GCP_PROJECT_ID: ((dns_gcp_project_id))
      SHARED_DNS_ZONE_NAME: "capi-land"
      IS_BOSH_LITE: true
  - task: run-bosh-cleanup
    file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "xena-postgres"
  - task: add-bosh-dns-runtime-config
    file: capi-ci/ci/bbl-tasks/update-runtime-config.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
    params:
      BBL_STATE_DIR: "xena-postgres"
      RUNTIME_CONFIG_PATH: "bosh-deployment/runtime-configs/dns.yml"
      RUNTIME_CONFIG_NAME: "dns"

- name: update-bosh-leia-azure-storage
  serial: true
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      resource: cf-deployment-concourse-tasks-v7
    - get: leia-azure-storage-bbl-state
    - get: capi-ci
    - get: capi-ci-private
    - get: cf-deployment
    - get: nightly
      trigger: true
    - get: bosh-deployment
      version: { ref: *BOSH_DEPLOYMENT_VERSION }
  - task: seed-capi-ci-private
    file: capi-ci/ci/setup-environment/seed.yml
    params:
      ENVIRONMENT: leia-azure-storage
      DOMAIN: &leia-azure-storage-domain "leia-azure-storage.capi.land"
  - put: capi-ci-private
    params:
      repository: updated-capi-ci-private
      rebase: true
  - task: collect-ops-files
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    input_mapping:
      base-ops-files: bosh-deployment
      new-ops-files: capi-ci
    params:
      NEW_OPS_FILES: bosh-director-operations/increase-persistent-disk.yml
  - task: update-bosh-leia-azure-storage
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    input_mapping:
      bbl-state: updated-capi-ci-private
      bbl-config: updated-capi-ci-private
      ops-files: collected-ops-files
    params:
      BBL_STATE_DIR: "leia-azure-storage"
      BBL_IAAS: "gcp"
      BBL_CONFIG_DIR: "leia-azure-storage/bosh-lite-plan-patch"
      BBL_ENV_NAME: "leia-azure-storage"
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((leia_gcp_json_key))
      BBL_GCP_PROJECT_ID: ((leia_gcp_project_id))
      BBL_GCP_ZONE: ((leia_gcp_zone))
      BBL_GCP_REGION: ((leia_gcp_region))
      IS_BOSH_LITE: true
      SKIP_LB_CREATION: true
      OPS_FILES: |
        base-ops-files/bosh-lite.yml
        base-ops-files/bosh-lite-runc.yml
        base-ops-files/gcp/bosh-lite-vm-type.yml
        increase-persistent-disk.yml
    ensure:
      put: leia-azure-storage-bbl-state
      params:
        repository: updated-bbl-state
        rebase: true
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    input_mapping:
      capi-ci-private: updated-bbl-state
    params:
      ENV_NAME: leia-azure-storage
  - task: update-cloud-config
    file: capi-ci/ci/bosh/update_cloud_config.yml
    input_mapping:
      bbl-state: updated-bbl-state
      cloud-config: cf-deployment
    params:
      BBL_STATE_DIR: "leia-azure-storage"
      CLOUD_CONFIG_PATH: iaas-support/bosh-lite/cloud-config.yml
  - task: create-dns-record
    attempts: 3
    file: capi-ci/ci/bbl-tasks/create-dns-record.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "leia-azure-storage"
      DNS_DOMAIN: *leia-azure-storage-domain
      GCP_DNS_SERVICE_ACCOUNT_KEY: ((dns_gcp_json_key))
      GCP_PROJECT_ID: ((dns_gcp_project_id))
      SHARED_DNS_ZONE_NAME: "capi-land"
      IS_BOSH_LITE: true
  - task: run-bosh-cleanup
    file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
    input_mapping:
      bbl-state: updated-bbl-state
    params:
      BBL_STATE_DIR: "leia-azure-storage"

- name: deliver-stories
  serial: true
  plan:
  - get: capi-release
    resource: capi-release-ci-passed
    trigger: true
  - put: deliver-capi-stories
    params:
      repos:
      - capi-release/src/cloud_controller_ng
      - capi-release/src/code.cloudfoundry.org/tps
      - capi-release

- name: merge-capi-release-master
  serial: true
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-release-master
      passed: [ship-it]
      trigger: true
    - get: capi-release
      resource: capi-release-develop
  - task: merge-master-into-develop
    file: capi-ci/ci/git/merge_master_into_develop.yml
  - put: capi-release-develop
    params:
      repository: merged/capi-release

- name: bump-ci-passed
  serial: true
  plan:
  - aggregate:
    - get: cloud_controller_ng
      passed:
      - elsa-mysql-s3-bypass
      - mulan-postgres-webdav-bridge
      - kiki-back-compat-migrations
      - xena-mysql-rotate-ccdb-key
      - xena-postgres-drats
      - ripley-nfs
      - buffy-bits-postgres-webdav
      - leia-azure-storage
    - get: capi-release
      resource: capi-release-develop
      passed:
      - elsa-mysql-s3-bypass
      - mulan-postgres-webdav-bridge
      - kiki-back-compat-migrations
      - xena-mysql-rotate-ccdb-key
      - xena-postgres-drats
      - ripley-nfs
      - buffy-bits-postgres-webdav
      - leia-azure-storage
      trigger: true
    - get: capi-release-tarball
      passed:
      - elsa-mysql-s3-bypass
      - mulan-postgres-webdav-bridge
      - kiki-back-compat-migrations
      - xena-mysql-rotate-ccdb-key
      - xena-postgres-drats
      - ripley-nfs
      - buffy-bits-postgres-webdav
      - leia-azure-storage
  - put: capi-release-ci-passed
    params:
      repository: capi-release

- name: xena-mysql-drats
  serial: true
  serial_groups: [xena-mysql]
  plan:
  - aggregate:
    - get: cloud_controller_ng
      passed: [create-capi-release]
    - get: cf-deployment
      resource: cf-deployment
    - get: capi-ci
    - get: capi-ci-private
    - get: cf-deployment-concourse-tasks
    - get: capi-release
      resource: capi-release-develop
      passed: [create-capi-release]
    - get: capi-release-tarball
      passed: [create-capi-release]
      trigger: true
    - get: drats
    - get: bbr-github-release
  - task: stemcell-upload
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    input_mapping:
      bbl-state: capi-ci-private
    params:
      BBL_STATE_DIR: xena-mysql
      INFRASTRUCTURE: bosh-lite
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    params:
      ENV_NAME: xena-mysql
  - put: xena-mysql-deployment # delete-deployment
    params:
      source_file: environment/metadata
      delete:
        enabled: true
  - put: xena-mysql-deployment
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *xena-mysql-domain
      releases:
      - capi-release-tarball/*.tgz
      ops_files:
      # Skip cert verification
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      # Bosh-lite deployment, minimal instances and resources for VMs/network
      - cf-deployment/operations/bosh-lite.yml
      # Deploy BBR
      - cf-deployment/operations/backup-and-restore/enable-backup-restore.yml
      - capi-ci/cf-deployment-operations/temporary/deploy-capi-backup-restore.yml
      # Use compiled releases
      - cf-deployment/operations/use-compiled-releases.yml
      # Use latest CAPI release
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
      # Enable TLS between CC and MySQL
      - cf-deployment/operations/experimental/enable-mysql-tls.yml
      - capi-ci/cf-deployment-operations/temporary/enable-mysql-tls-cc.yml
      # Ensure that we support BBR with multiple CC instances
      - capi-ci/cf-deployment-operations/scale-up-cloud-controller.yml
  - task: download-vars-store
    output_mapping:
      destination-directory: xena-mysql-deployment-vars
    file: capi-ci/ci/gcs/download-from-gcs.yml
    params:
      GCP_JSON_KEY: ((xena_gcp_json_key))
      GCP_BUCKET: ((xena_bosh_vars_bucket))
      GCP_PATH: bosh-mysql
  - task: run-drats
    file: capi-ci/ci/drats/run-drats.yml
    privileged: true # necessary for sshuttle util
    input_mapping:
      vars-store: xena-mysql-deployment-vars
      bbr-binary-release: bbr-github-release
    params:
      CF_API_URL: https://api.xena-mysql.capi.land
      SKIP_SUITE_NAME: "cf-nfsbroker|cf-credhub"
      BBL_STATE_DIR: "xena-mysql"

- name: xena-mysql-rotate-ccdb-key
  serial: true
  serial_groups: [xena-mysql]
  plan:
  - aggregate:
    - get: cloud_controller_ng
      passed: [xena-mysql-drats]
      trigger: true
    - get: capi-ci
    - get: capi-ci-private
    - get: cf-deployment
    - get: cf-deployment-concourse-tasks
    - get: capi-release
      resource: capi-release-develop
      passed: [xena-mysql-drats]
      trigger: true
    - get: capi-release-tarball
      passed: [xena-mysql-drats]
      trigger: true
    - get: staticfile-app
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    params:
      ENV_NAME: xena-mysql
  - task: download-vars-store
    output_mapping:
      destination-directory: xena-mysql-deployment-vars
    file: capi-ci/ci/gcs/download-from-gcs.yml
    params:
      GCP_JSON_KEY: ((xena_gcp_json_key))
      GCP_BUCKET: ((xena_bosh_vars_bucket))
      GCP_PATH: bosh-mysql
  - task: seed-app-data # encrypt app env vars with db_encryption_key
    file: capi-ci/ci/cf/push-app.yml
    input_mapping:
      vars-store: xena-mysql-deployment-vars
    params:
      CF_API_URL: https://api.xena-mysql.capi.land
      APP_NAME: baby
      APP_ENV_VAR_NAME: larva
      APP_ENV_VAR_VALUE: caterpillar
  - put: xena-mysql-deployment # add database_encryption block and set current key label
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *xena-mysql-domain
      releases:
      - capi-release-tarball/*.tgz
      ops_files:
      # Skip cert verification
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      # Bosh-lite deployment, minimal instances and resources for VMs/network
      - cf-deployment/operations/bosh-lite.yml
      # Deploy BBR
      - cf-deployment/operations/backup-and-restore/enable-backup-restore.yml
      - capi-ci/cf-deployment-operations/temporary/deploy-capi-backup-restore.yml
      # Use compiled releases
      - cf-deployment/operations/use-compiled-releases.yml
      # Use latest CAPI release
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
      # Enable TLS between CC and MySQL
      - cf-deployment/operations/experimental/enable-mysql-tls.yml
      - capi-ci/cf-deployment-operations/temporary/enable-mysql-tls-cc.yml
      # Ensure that we support BBR with multiple CC instances
      - capi-ci/cf-deployment-operations/scale-up-cloud-controller.yml
      # Add custom database encryption keys
      - capi-ci/cf-deployment-operations/rotate-cc-database-key/add-database-encryption-keys.yml
  - task: seed-app-data # encrypt app env vars with initial database_encryption key/current_key_label
    file: capi-ci/ci/cf/push-app.yml
    input_mapping:
      vars-store: xena-mysql-deployment-vars
    params:
      CF_API_URL: https://api.xena-mysql.capi.land
      APP_NAME: teenager
      APP_ENV_VAR_NAME: pupa
      APP_ENV_VAR_VALUE: chrysalis
  - put: xena-mysql-deployment # change current database encryption key
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *xena-mysql-domain
      releases:
      - capi-release-tarball/*.tgz
      ops_files:
      # Skip cert verification
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      # Bosh-lite deployment, minimal instances and resources for VMs/network
      - cf-deployment/operations/bosh-lite.yml
      # Deploy BBR
      - cf-deployment/operations/backup-and-restore/enable-backup-restore.yml
      - capi-ci/cf-deployment-operations/temporary/deploy-capi-backup-restore.yml
      # Use compiled releases
      - cf-deployment/operations/use-compiled-releases.yml
      # Use latest CAPI release
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
      # Enable TLS between CC and MySQL
      - cf-deployment/operations/experimental/enable-mysql-tls.yml
      - capi-ci/cf-deployment-operations/temporary/enable-mysql-tls-cc.yml
      # Ensure that we support BBR with multiple CC instances
      - capi-ci/cf-deployment-operations/scale-up-cloud-controller.yml
      # Add custom database encryption keys
      - capi-ci/cf-deployment-operations/rotate-cc-database-key/add-database-encryption-keys.yml
      # Add new key and make it the current key
      - capi-ci/cf-deployment-operations/rotate-cc-database-key/change-current-database-encryption-key.yml
  - task: seed-app-data # encrypt app env vars with changed database_encryption key/current_key_label
    file: capi-ci/ci/cf/push-app.yml
    input_mapping:
      vars-store: xena-mysql-deployment-vars
    params:
      CF_API_URL: https://api.xena-mysql.capi.land
      APP_NAME: mature
      APP_ENV_VAR_NAME: transcendant
      APP_ENV_VAR_VALUE: butterfly
  - task: rotate-db-encryption-key
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      bbl-state: capi-ci-private
    params:
      ERRAND_NAME: "rotate-cc-database-key"
      BBL_STATE_DIR: xena-mysql
  - put: xena-mysql-deployment # remove unused initial key and old db_encryption_key
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *xena-mysql-domain
      releases:
      - capi-release-tarball/*.tgz
      ops_files:
      # Skip cert verification
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      # Bosh-lite deployment, minimal instances and resources for VMs/network
      - cf-deployment/operations/bosh-lite.yml
      # Deploy BBR
      - cf-deployment/operations/backup-and-restore/enable-backup-restore.yml
      - capi-ci/cf-deployment-operations/temporary/deploy-capi-backup-restore.yml
      # Use compiled releases
      - cf-deployment/operations/use-compiled-releases.yml
      # Use latest CAPI release
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
      # Enable TLS between CC and MySQL
      - cf-deployment/operations/experimental/enable-mysql-tls.yml
      - capi-ci/cf-deployment-operations/temporary/enable-mysql-tls-cc.yml
      # Ensure that we support BBR with multiple CC instances
      - capi-ci/cf-deployment-operations/scale-up-cloud-controller.yml
      # Add custom database encryption keys
      - capi-ci/cf-deployment-operations/rotate-cc-database-key/add-database-encryption-keys.yml
      # Add new key and make it the current key
      - capi-ci/cf-deployment-operations/rotate-cc-database-key/change-current-database-encryption-key.yml
      # Remove the old encryption key
      - capi-ci/cf-deployment-operations/rotate-cc-database-key/remove-old-key.yml
  - aggregate:
    - task: verify-env-vars
      file: capi-ci/ci/cf/verify-env-vars.yml
      input_mapping:
        vars-store: xena-mysql-deployment-vars
      params:
        CF_API_URL: https://api.xena-mysql.capi.land
        APP_NAME: baby
        APP_ENV_VAR_NAME: larva
        APP_ENV_VAR_VALUE: caterpillar
    - task: verify-env-vars
      file: capi-ci/ci/cf/verify-env-vars.yml
      input_mapping:
        vars-store: xena-mysql-deployment-vars
      params:
        CF_API_URL: https://api.xena-mysql.capi.land
        APP_NAME: teenager
        APP_ENV_VAR_NAME: pupa
        APP_ENV_VAR_VALUE: chrysalis
    - task: verify-env-vars
      file: capi-ci/ci/cf/verify-env-vars.yml
      input_mapping:
        vars-store: xena-mysql-deployment-vars
      params:
        CF_API_URL: https://api.xena-mysql.capi.land
        APP_NAME: mature
        APP_ENV_VAR_NAME: transcendant
        APP_ENV_VAR_VALUE: butterfly

- name: xena-postgres-drats
  serial: true
  plan:
  - aggregate:
    - get: cloud_controller_ng
      passed: [create-capi-release]
    - get: cf-deployment
      resource: cf-deployment
    - get: capi-ci
    - get: capi-ci-private
    - get: cf-deployment-concourse-tasks
    - get: capi-release
      resource: capi-release-develop
      passed: [create-capi-release]
    - get: capi-release-tarball
      passed: [create-capi-release]
      trigger: true
    - get: drats
    - get: bbr-github-release
  - task: stemcell-upload
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    input_mapping:
      bbl-state: capi-ci-private
    params:
      BBL_STATE_DIR: xena-postgres
      INFRASTRUCTURE: bosh-lite
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    params:
      ENV_NAME: xena-postgres
  - put: xena-postgres-deployment # delete-deployment
    params:
      source_file: environment/metadata
      delete:
        enabled: true
  - put: xena-postgres-deployment
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *xena-postgres-domain
      releases:
      - capi-release-tarball/*.tgz
      ops_files:
      # Skip cert verification
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      # Bosh-lite deployment, minimal instances and resources for VMs/network
      - cf-deployment/operations/bosh-lite.yml
      # Deploy BBR
      - cf-deployment/operations/backup-and-restore/enable-backup-restore.yml
      - capi-ci/cf-deployment-operations/temporary/deploy-capi-backup-restore.yml
      # Use compiled releases
      - cf-deployment/operations/use-compiled-releases.yml
      # Use latest CAPI release
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
      # Use postgres
      - cf-deployment/operations/use-postgres.yml
      # Enable TLS between CC and Postgres
      - cf-deployment/operations/experimental/enable-tls-cloud-controller-postgres.yml
      # Ensure that we support BBR with multiple CC instances
      - capi-ci/cf-deployment-operations/scale-up-cloud-controller.yml
  - task: download-vars-store
    output_mapping:
      destination-directory: xena-postgres-deployment-vars
    file: capi-ci/ci/gcs/download-from-gcs.yml
    params:
      GCP_JSON_KEY: ((xena_gcp_json_key))
      GCP_BUCKET: ((xena_bosh_vars_bucket))
      GCP_PATH: bosh-postgres
  - task: run-drats
    file: capi-ci/ci/drats/run-drats.yml
    privileged: true # necessary for sshuttle util
    input_mapping:
      vars-store: xena-postgres-deployment-vars
      bbr-binary-release: bbr-github-release
    params:
      CF_API_URL: https://api.xena-postgres.capi.land
      SKIP_SUITE_NAME: "cf-nfsbroker|cf-credhub"
      BBL_STATE_DIR: "xena-postgres"

- name: leia-azure-storage
  serial: true
  serial_groups: [leia-azure-storage]
  plan:
  - aggregate:
    - get: cloud_controller_ng
      passed: [create-capi-release]
    - get: cf-deployment
      resource: cf-deployment
    - get: capi-ci
    - get: capi-ci-private
    - get: cf-deployment-concourse-tasks
      resource: cf-deployment-concourse-tasks-v7
    - get: capi-release
      resource: capi-release-develop
      passed: [create-capi-release]
    - get: capi-release-tarball
      passed: [create-capi-release]
      trigger: true
    - get: leia-azure-storage-integration-configs
    - get: cf-acceptance-tests
    - get: sync-integration-tests
  - task: stemcell-upload
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    input_mapping:
      bbl-state: capi-ci-private
    params:
      BBL_STATE_DIR: leia-azure-storage
      INFRASTRUCTURE: bosh-lite
  - task: release-upload
    file: capi-ci/ci/bosh/upload-release.yml
    input_mapping:
      bbl-state: capi-ci-private
      release-tarball: capi-release-tarball
    params:
      BBL_STATE_DIR: leia-azure-storage
  - task: collect-ops-files
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    input_mapping:
      base-ops-files: cf-deployment
      new-ops-files: capi-ci
    params:
      NEW_OPS_FILES: |
        cf-deployment-operations/skip-cert-verify.yml
        cf-deployment-operations/use-latest-capi.yml
        cf-deployment-operations/temporary/add-deployment-updater.yml
  - task: deploy
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      bbl-state: capi-ci-private
      ops-files: collected-ops-files
      vars-files: capi-ci-private
    params:
      BBL_STATE_DIR: leia-azure-storage
      SYSTEM_DOMAIN: *leia-azure-storage-domain
      OPS_FILES: |
        base-ops-files/operations/bosh-lite.yml
        base-ops-files/operations/use-compiled-releases.yml
        base-ops-files/operations/use-external-blobstore.yml
        base-ops-files/operations/use-azure-storage-blobstore.yml
        use-latest-capi.yml
        add-deployment-updater.yml
        skip-cert-verify.yml
        base-ops-files/operations/experimental/use-pxc.yml
      VARS_FILES: leia-azure-storage/azure-storage-vars.yml
  - task: updated-integration-configs
    file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
    input_mapping:
      bbl-state: capi-ci-private
      integration-configs: leia-azure-storage-integration-configs
    params:
      BBL_STATE_DIR: leia-azure-storage
      CATS_INTEGRATION_CONFIG_FILE: "leia-azure-storage/cats_integration_config.json"
      SYSTEM_DOMAIN: *leia-azure-storage-domain
    ensure:
      put: leia-azure-storage-integration-configs
      params:
        repository: updated-integration-configs
        rebase: true
  - aggregate:
    - task: acceptance-tests
      file: cf-deployment-concourse-tasks/run-cats/task.yml
      input_mapping:
        integration-config: updated-integration-configs
      params:
        NODES: 4
        CONFIG_FILE_PATH: "leia-azure-storage/cats_integration_config.json"
        CAPTURE_LOGS: true
    - task: sync-integration-tests
      file: sync-integration-tests/concourse/task_with_credhub.yml
      input_mapping:
        environment: capi-ci-private
      params:
        BOSH_DEPLOYMENT_NAME: cf
        BOSH_API_INSTANCE: api/0
        CF_API_TARGET: https://api.leia-azure-storage.capi.land
        CF_SKIP_SSL_VALIDATION: true
        CF_APPS_DOMAIN: *leia-azure-storage-domain
        BBL_STATE_DIR: leia-azure-storage
        USE_CREDHUB: true
